from dotenv import load_dotenv
from langchain.prompts import ChatPromptTemplate
from langchain_core.output_parsers import PydanticOutputParser, StrOutputParser
from langchain.schema.runnable import RunnableLambda
from langchain_openai import ChatOpenAI

from pydantic import BaseModel, Field
# Carregar as chas APIs presentes no arquivo .env
load_dotenv()

# --------------------------------------------------------------------------------------------------------------

# Instancias um chatmodel para comunicarmos com os modelos LLMs
model = ChatOpenAI(model="gpt-4o", temperature=0.2)

# --------------------------------------------------------------------------------------------------------------
## Definindo a estrutura da chain que vai avaliar a entrada e retornar uma classifica√ß√£o para nossa fun√ß√£o 'executa_roteamento'
# Definindo a minha estrutura de sa√≠da usando Pydantic
class Rota(BaseModel):
    opcao: bool = Field(description="Defina True se necessitar atendimento humano e false caso contr√°rio.")
    pergunta_user: str = Field(description="Colocar neste parametro a pergunta do usu√°rio sem alter√°-la.")


parser = PydanticOutputParser(pydantic_object=Rota)

sys_prompt_rota = """Voc√™ √© um especialista em classifica√ß√£o. Voc√™ receber√° perguntas do usu√°rio e precisar√° classificar, \
de forma booleana, se o usu√°rio est√° solicitando conversar com um atendente humano ou n√£o.
\n{format_instructions}\n
Pergunta Usu√°rio: {pergunta_user}"
"""

rota_prompt_template = ChatPromptTemplate([("system", sys_prompt_rota),],
                                          partial_variables={"format_instructions": parser.get_format_instructions()}
                                          )

# criando o peda√ßo da chain que controla o roteamento entre as branches
chain_de_roteamento = rota_prompt_template | model | parser

# Se quiser testar a cadeia intermedi√°ria de roteamento:
# result = chain_de_roteamento.invoke({"pergunta_user": "Quero falar com um humano"})

# --------------------------------------------------------------------------------------------------------------

# Definindo o prompt de chatbot que tira duvidas do usu√°rio:

sys_chatbot_prompt = """Voc√™ √© um assistente de uma clinica odontol√≥gica e tem como objetivo responder √† perguntas dos clientes. A seguir voc√™ \
encontra a FAQ do nosso site, use essas informa√ß√µes para realizar o atendimento e tirar d√∫vidas. Caso voc√™ desconhe√ßa alguma \
informa√ß√£o, n√£o invente. Seja sempre amig√°vel e esteja disposto a ajudar!

**FAQ - Cl√≠nica Odontol√≥gica**
1. **Quais servi√ßos a cl√≠nica oferece?**  
   Oferecemos tratamentos como limpeza dental, clareamento, ortodontia, implantes, pr√≥teses, tratamento de canal e est√©tica dental.
2. **A cl√≠nica aceita conv√™nios?**  
   Sim, trabalhamos com os principais conv√™nios odontol√≥gicos. Consulte nossa equipe para verificar se aceitamos o seu.
3. **Como agendar uma consulta?**  
   Voc√™ pode agendar sua consulta pelo telefone, WhatsApp ou diretamente em nosso site.
4. **Quanto tempo dura uma consulta?**  
   Depende do procedimento, mas consultas de rotina geralmente duram entre 30 e 60 minutos.
5. **Voc√™s atendem emerg√™ncias?**  
   Sim, oferecemos atendimento emergencial para dores agudas, traumas ou casos de urg√™ncia.
6. **√â poss√≠vel parcelar tratamentos?**  
   Sim, oferecemos op√ß√µes de parcelamento. Entre em contato para conhecer os detalhes.
7. **Crian√ßas podem ser atendidas na cl√≠nica?**  
   Sim, contamos com profissionais especializados em odontopediatria para cuidar dos sorrisos dos pequenos.
8. **O clareamento dental √© seguro?**  
   Sim, nossos tratamentos de clareamento s√£o realizados com t√©cnicas e produtos seguros, supervisionados por especialistas.
Se tiver mais d√∫vidas, entre em contato conosco! üòä

D√∫vida do usu√°rio: {pergunta_user}
"""

prompt_template_chatbot = ChatPromptTemplate([("system", sys_chatbot_prompt),])

chain_chatbot = prompt_template_chatbot | model | StrOutputParser()

## Definindo a fun√ß√£o de escolha de roteamento (n√≥ de rota)
def executa_roteamento(entrada: Rota):
    if entrada.opcao:
        print(f"Op√ß√£o classe Pydantic: {entrada.opcao} (Atendimento humano)")
        return "Atendimento redirecionado para um humano. Favor aguardar alguns minutos que j√° vamos te atender!"
    else:
        print(f"Op√ß√£o classe Pydantic: {entrada.opcao} (Atendimento Chatbot)")
        return   RunnableLambda(lambda x: {"pergunta_user": x.pergunta_user}) | chain_chatbot

# --------------------------------------------------------------------------------------------------------------

# Crie a cadeia final usando LangChain Expression Language (LCEL)
chain = chain_de_roteamento | RunnableLambda(executa_roteamento)

# --------------------------------------------------------------------------------------------------------------

# Executando nossa chain principal.
result = chain.invoke({"pergunta_user": "Quais servi√ßos a cl√≠nica oferece?"})

# --------------------------------------------------------------------------------------------------------------
# Imprimindo a saida.
print("---------------")
print(result)
print("---------------")